@page "/"
@using System.Runtime.CompilerServices
@using estudyRatings.Components.Models
@rendermode InteractiveServer

@inject CourseRatingService CourseRatingService
@inject RatingService RatingService
@inject LecturerService LecturerService
@inject CourseService CourseService

<PageTitle>🏠 Home</PageTitle>

<h1>🏠 Home</h1>
<hr>
    <div class="row">
    @if (Ratings != null){
        <div class="column">
            @for (int i = 0; i < Lecturers.Count; i++){
                <h4><a href="lecturer/@LecturerList[i].Id"><li>@LecturerList[i].Username</li></a></h4>
                @for (int j = 0; j < Ratings.Count; j++){
                    <div class="commentcontainer">
                    @if (LecturerList[i].Id == Ratings[j].LecturerId){
                        <div class="comment">
                            <h5>@Ratings[j].DateAdded</h5>
                            <p>@Ratings[j].Comment</p>
                        </div>
                    }
                    </div>
                }
            }
        </div>
    }
    @if (CourseRatings != null){
        <div class="column">
            @for (int i = 0; i < Courses.Count; i++){
                <h4><a href="course/@CourseList[i].Id"><li>@CourseList[i].Title</li></a></h4>
                @for (int j = 0; j < CourseRatings.Count; j++){
                    <div class="commentcontainer">
                    @if (CourseList[i].Id == CourseRatings[j].CourseId){
                        <div class="comment">
                            <h5>@CourseRatings[j].DateAdded</h5>
                            <p>@CourseRatings[j].Comment</p>
                        </div>
                    }
                    </div>
                }
            }
        </div>
    }
    </div>


@code {
    private List<CourseRating> CourseRatings = new List<CourseRating>();
    private List<Rating> Ratings = new List<Rating>();
    private List<Lecturer> LecturerList = new List<Lecturer>();
    private HashSet<Lecturer> Lecturers = new HashSet<Lecturer>();
    private List<Course> CourseList = new List<Course>();
    private HashSet<Course> Courses = new HashSet<Course>();
    protected override async Task OnInitializedAsync()
    {
        await SearchRatings();
        await GetLecturers();
        await GetCourses();
        LecturerList = Lecturers.ToList<Lecturer>();
        CourseList = Courses.ToList<Course>();
    }
    private async Task SearchRatings()
    {
        Ratings = await RatingService.GetLatestRatings(3);
        CourseRatings = await CourseRatingService.GetLatestCourseRatings(3);
    }
    private async Task GetLecturers()
    {
        foreach (var rating in Ratings){
            Lecturer lecturer = await LecturerService.GetLecturerByIdAsync(rating.LecturerId.ToString());
            Lecturers.Add(lecturer);
        }
    }
    private async Task GetCourses()
    {
        foreach (var rating in CourseRatings){
            Course course = await CourseService.GetCourseByIdAsync(rating.CourseId.ToString());
            Courses.Add(course);
        }
    }
}
